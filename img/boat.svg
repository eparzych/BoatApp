<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- Created with Inkscape (http://www.inkscape.org/) -->

<svg
   version="1.1"
   id="svg824"
   width="1899"
   height="1068"
   viewBox="0 0 1899 1068"
   sodipodi:docname="11.png"
   inkscape:version="1.1.1 (3bf5ae0d25, 2021-09-20)"
   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:svg="http://www.w3.org/2000/svg">
  <defs
     id="defs828">
    <meshgradient
       inkscape:collect="always"
       id="meshgradient8000"
       gradientUnits="userSpaceOnUse"
       x="1432.6912"
       y="283.22174">
      <meshrow
         id="meshrow8002">
        <meshpatch
           id="meshpatch8004">
          <stop
             path="c 79.2642,0  158.528,0  237.793,0"
             style="stop-color:#ffffff;stop-opacity:1"
             id="stop8006" />
          <stop
             path="c 0,146.235  0,292.47  0,438.704"
             style="stop-color:#64391c;stop-opacity:1"
             id="stop8008" />
          <stop
             path="c -79.2642,0  -158.528,0  -237.793,0"
             style="stop-color:#ffffff;stop-opacity:1"
             id="stop8010" />
          <stop
             path="c 0,-146.235  0,-292.47  0,-438.704"
             style="stop-color:#64391c;stop-opacity:1"
             id="stop8012" />
        </meshpatch>
      </meshrow>
    </meshgradient>
    <filter
       inkscape:collect="always"
       style="color-interpolation-filters:sRGB"
       id="filter11282"
       x="-1.7069417"
       y="-0.92522042"
       width="4.4138834"
       height="2.8504408">
      <feGaussianBlur
         inkscape:collect="always"
         stdDeviation="169.12423"
         id="feGaussianBlur11284" />
    </filter>
    <meshgradient
       inkscape:collect="always"
       id="meshgradient11294"
       gradientUnits="userSpaceOnUse"
       x="947.33057"
       y="250.21101">
      <meshrow
         id="meshrow11296">
        <meshpatch
           id="meshpatch11298">
          <stop
             path="c 27.6366,0  55.2731,0  82.9097,0"
             style="stop-color:#ffffff;stop-opacity:1"
             id="stop11300" />
          <stop
             path="c 0,168.736  0,337.471  0,506.207"
             style="stop-color:#64391c;stop-opacity:1"
             id="stop11302" />
          <stop
             path="c -27.6366,0  -55.2731,0  -82.9097,0"
             style="stop-color:#ffffff;stop-opacity:1"
             id="stop11304" />
          <stop
             path="c 0,-168.736  0,-337.471  0,-506.207"
             style="stop-color:#64391c;stop-opacity:1"
             id="stop11306" />
        </meshpatch>
      </meshrow>
    </meshgradient>
    <filter
       inkscape:collect="always"
       style="color-interpolation-filters:sRGB"
       id="filter11648"
       x="-1.9498593"
       y="-0.31935971"
       width="4.8997186"
       height="1.6387194">
      <feGaussianBlur
         inkscape:collect="always"
         stdDeviation="67.359236"
         id="feGaussianBlur11650" />
    </filter>
    <meshgradient
       inkscape:collect="always"
       id="meshgradient13192"
       gradientUnits="userSpaceOnUse"
       x="432.82913"
       y="344.22357">
      <meshrow
         id="meshrow13194">
        <meshpatch
           id="meshpatch13196">
          <stop
             path="c 18.5551,0  37.1101,0  55.6652,0"
             style="stop-color:#ffffff;stop-opacity:1"
             id="stop13198" />
          <stop
             path="c 0,105.554  0,211.107  0,316.661"
             style="stop-color:#64391c;stop-opacity:1"
             id="stop13200" />
          <stop
             path="c -18.5551,0  -37.1101,0  -55.6652,0"
             style="stop-color:#ffffff;stop-opacity:1"
             id="stop13202" />
          <stop
             path="c 0,-105.554  0,-211.107  0,-316.661"
             style="stop-color:#64391c;stop-opacity:1"
             id="stop13204" />
        </meshpatch>
      </meshrow>
    </meshgradient>
    <filter
       inkscape:collect="always"
       style="color-interpolation-filters:sRGB"
       id="filter13206"
       x="-1.6822262"
       y="-0.29571536"
       width="4.3644524"
       height="1.5914307">
      <feGaussianBlur
         inkscape:collect="always"
         stdDeviation="39.017275"
         id="feGaussianBlur13208" />
    </filter>
    <meshgradient
       inkscape:collect="always"
       id="meshgradient13210"
       gradientUnits="userSpaceOnUse"
       x="152.75665"
       y="230.14447">
      <meshrow
         id="meshrow13212">
        <meshpatch
           id="meshpatch13214">
          <stop
             path="c 514.567,0  1029.13,0  1543.7,0"
             style="stop-color:#ffffff;stop-opacity:1"
             id="stop13216" />
          <stop
             path="c 0,181.929  0,363.858  0,545.787"
             style="stop-color:#64391c;stop-opacity:1"
             id="stop13218" />
          <stop
             path="c -514.567,0  -1029.13,0  -1543.7,0"
             style="stop-color:#ffffff;stop-opacity:1"
             id="stop13220" />
          <stop
             path="c 0,-181.929  0,-363.858  0,-545.787"
             style="stop-color:#64391c;stop-opacity:1"
             id="stop13222" />
        </meshpatch>
      </meshrow>
    </meshgradient>
    <filter
       inkscape:collect="always"
       style="color-interpolation-filters:sRGB"
       id="filter13448"
       x="-0.078498648"
       y="-0.22202522"
       width="1.1569973"
       height="1.4440504">
      <feGaussianBlur
         inkscape:collect="always"
         stdDeviation="50.49106"
         id="feGaussianBlur13450" />
    </filter>
    <filter
       inkscape:collect="always"
       style="color-interpolation-filters:sRGB"
       id="filter13582"
       x="-1.3165764"
       y="-1.1023888"
       width="3.6331528"
       height="3.2047776">
      <feGaussianBlur
         inkscape:collect="always"
         stdDeviation="18.213837"
         id="feGaussianBlur13584" />
    </filter>
    <meshgradient
       inkscape:collect="always"
       id="meshgradient13586"
       gradientUnits="userSpaceOnUse"
       x="1636.278"
       y="320.02362">
      <meshrow
         id="meshrow13588">
        <meshpatch
           id="meshpatch13590">
          <stop
             path="c 11.8054,0  23.6108,0  35.4162,0"
             style="stop-color:#ffffff;stop-opacity:1"
             id="stop13592" />
          <stop
             path="c 0,12.5463  0,25.0926  0,37.639"
             style="stop-color:#64391c;stop-opacity:1"
             id="stop13594" />
          <stop
             path="c -11.8054,0  -23.6108,0  -35.4162,0"
             style="stop-color:#ffffff;stop-opacity:1"
             id="stop13596" />
          <stop
             path="c 0,-12.5463  0,-25.0926  0,-37.639"
             style="stop-color:#64391c;stop-opacity:1"
             id="stop13598" />
        </meshpatch>
      </meshrow>
    </meshgradient>
    <filter
       inkscape:collect="always"
       style="color-interpolation-filters:sRGB"
       id="filter13712"
       x="-1.2376577"
       y="-1.1645662"
       width="3.4753154"
       height="3.3291323">
      <feGaussianBlur
         inkscape:collect="always"
         stdDeviation="18.263781"
         id="feGaussianBlur13714" />
    </filter>
    <filter
       inkscape:collect="always"
       style="color-interpolation-filters:sRGB"
       id="filter15085"
       x="-0.19062756"
       y="-0.13404932"
       width="1.3812551"
       height="1.2680986">
      <feGaussianBlur
         inkscape:collect="always"
         stdDeviation="3.1295925"
         id="feGaussianBlur15087" />
    </filter>
  </defs>
  <sodipodi:namedview
     id="namedview826"
     pagecolor="#ffffff"
     bordercolor="#111111"
     borderopacity="1"
     inkscape:pageshadow="0"
     inkscape:pageopacity="0"
     inkscape:pagecheckerboard="1"
     showgrid="false"
     inkscape:zoom="0.34570827"
     inkscape:cx="924.18964"
     inkscape:cy="365.91546"
     inkscape:window-width="1920"
     inkscape:window-height="1017"
     inkscape:window-x="-8"
     inkscape:window-y="-8"
     inkscape:window-maximized="1"
     inkscape:current-layer="layer2" />
  <g
     inkscape:groupmode="layer"
     id="layer2"
     inkscape:label="Image 1">
    <path
       style="fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="m 145.95193,494.86339 0.36158,17.71725"
       id="path947-7" />
    <path
       style="fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="m 146.31351,512.58064 h 13.01675 C 492.23696,767.474 1007.3421,870.10842 1698.3473,697.66507 l 2.0222,-392.62936 c -351.751,-88.71448 -504.9253,-76.5646 -693.0747,-82.17985 -404.71011,10.79222 -654.58543,122.82252 -847.6529,271.99643 l -13.68997,0.0111 v 0 0"
       id="path1062-3"
       sodipodi:nodetypes="ccccccccc" />
    <path
       style="fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="m 188.97954,503.17965 c 183.71951,135.40522 447.32445,251.39379 786.86807,256.19995 189.21419,2.67828 421.56729,-10.92495 698.48829,-80.11217 l 0.3616,-353.26028 C 1460.5897,275.83078 1237.0305,243.29699 994.07711,246.9658 654.11709,254.93192 395.45489,350.83226 188.97954,503.17965 Z"
       id="path3628-6"
       sodipodi:nodetypes="cscccc" />
    <path
       style="fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="m 1428.4639,277.19431 1.0847,446.90861 0.7232,-0.72315"
       id="path4442-1" />
    <path
       style="fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="m 1611.4216,311.54409 c 30.8043,12.10281 57.6269,28.18729 63.6375,65.08377 v -0.36157"
       id="path4444-6"
       sodipodi:nodetypes="ccc" />
    <path
       style="fill:none;stroke:#000000;stroke-width:1.03713px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="m 1675.3959,625.7654 c -7.3892,40.3276 -31.5335,55.21123 -56.0244,65.06131 h 1.1671"
       id="path4574-8"
       sodipodi:nodetypes="ccc" />
    <path
       style="fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="m 236.40779,469.86023 c -7.99333,16.77842 -20.19632,22.61213 -23.33972,31.5274 -3.60778,10.23237 13.90788,15.64847 21.80568,31.87956"
       id="path4993-6"
       sodipodi:nodetypes="csc" />
    <path
       style="fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="m 944.62261,248.19155 -1.0227,509.81241"
       id="path5389-4" />
    <path
       style="fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 1032.5742,758.5153 V 246.14616"
       id="path5391-1" />
    <path
       style="fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="m 428.67405,362.2218 v 278.68382 l 1.0227,-0.51135 -1.53404,-1.02269"
       id="path5393-4" />
    <path
       style="fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 489.52428,666.47294 V 337.16583"
       id="path5395-1" />
    <path
       style="fill:#502d16;stroke-width:2.04539"
       d="m 1431.0835,629.46748 c -2.3694,-169.10999 -1.7435,-349.24963 1.2135,-349.24963 5.2138,0 87.8134,14.73523 133.4458,23.80584 41.109,8.17145 49.0612,10.394 63.0341,17.61728 18.4212,9.52276 31.6543,21.80359 38.5217,35.74953 l 4.8043,9.75625 v 134.99546 134.99547 l -5.9843,11.81734 c -3.2914,6.49954 -10.4279,15.97382 -15.8591,21.05399 -16.2492,15.19928 -33.5248,21.77792 -85.0541,32.38907 -41.2959,8.50386 -125.017,23.71388 -130.5292,23.71388 -1.5705,0 -2.6427,-28.8427 -3.5927,-96.64448 z"
       id="path6148" />
    <path
       style="fill:#502d16;stroke-width:2.04539"
       d="m 958.55548,757.31638 -14.02546,-0.72052 0.73046,-252.33634 c 0.40175,-138.78499 1.19066,-252.76384 1.75314,-253.28633 0.56249,-0.5225 19.66128,-1.61421 42.44176,-2.42602 l 41.41902,-1.47603 v 255.8835 255.88349 l -29.1467,-0.40061 c -16.03072,-0.22033 -35.45821,-0.72484 -43.17222,-1.12114 z"
       id="path6187" />
    <path
       style="fill:#502d16;stroke-width:2.04539"
       d="m 459.35693,653.52013 c -14.53221,-6.11411 -27.17768,-12.30138 -28.10105,-13.74951 -0.92337,-1.44811 -1.4591,-63.79039 -1.19051,-138.53837 l 0.48834,-135.90544 17.38578,-7.47476 c 9.56218,-4.11112 22.67822,-9.44136 29.14675,-11.84498 l 11.76097,-4.37023 v 161.55677 c 0,88.85624 -0.69032,161.53119 -1.53404,161.49993 -0.84373,-0.0313 -13.42403,-5.0593 -27.95624,-11.17341 z"
       id="path6226" />
    <path
       style="fill:#502d16;stroke-width:2.04539"
       d="M 973.60364,780.0606 C 732.99084,768.32265 530.02857,719.20788 350.30605,629.22903 290.7228,599.39843 227.38429,560.8365 179.03897,524.95776 165.16461,514.66112 159.06291,511.34645 153.983,511.34645 c -6.31095,0 -6.71522,-0.43098 -6.71522,-7.15885 0,-6.58645 0.48933,-7.15885 6.11982,-7.15885 4.47285,0 12.31689,-4.60376 29.14675,-17.10656 100.05597,-74.33096 213.7752,-134.15584 331.29076,-174.28389 130.27602,-44.48536 274.82143,-70.48477 438.67387,-78.90437 38.3074,-1.96843 72.15802,-1.97721 158.15642,-0.041 140.7797,3.16955 200.0901,7.24316 291.4271,20.016 84.5549,11.82442 205.6233,36.12728 289.4516,58.1035 l 7.1588,1.87675 -0.6443,193.85966 c -0.3543,106.62281 -1.2748,194.4629 -2.0454,195.2002 -2.1407,2.04823 -83.2798,20.75734 -139.6174,32.19307 -118.1541,23.98362 -230.7877,39.56459 -349.6082,48.36241 -41.4234,3.06712 -196.1919,5.56022 -233.17396,3.7561 z M 1177.1195,756.924 c 172.0984,-11.35345 313.8008,-32.32616 470.9501,-69.70315 l 27.1014,-6.44589 v -25.90941 c 0,-14.25019 0.2281,-94.27756 0.5113,-177.83863 l 0.5155,-151.9292 -7.1589,-1.89821 c -12.8878,-3.41726 -80.1058,-17.96628 -112.4962,-24.34929 -129.5486,-25.52944 -246.8525,-40.80293 -381.4645,-49.66836 -52.6045,-3.4645 -223.4171,-3.50355 -265.90011,-0.0608 -151.24552,12.25669 -275.40883,37.19758 -393.73677,79.09057 -11.8121,4.18198 -22.39697,7.8274 -23.52194,8.10094 -1.12496,0.27354 -4.34644,1.53559 -7.15885,2.80455 -2.8124,1.26897 -15.23812,6.40863 -27.6127,11.42147 -66.81636,27.06674 -130.83789,60.1182 -196.35704,101.37038 -28.12627,17.70885 -72.6112,49.0912 -72.6112,51.22429 0,2.22054 38.86494,29.76157 69.1797,49.02314 192.88352,122.5553 410.05788,191.17443 653.86418,206.59709 36.39406,2.30221 222.70163,1.02034 265.90013,-1.82949 z"
       id="path6265" />
    <path
       style="fill:#502d16;stroke-width:0.511346"
       d="m 1627.1776,688.33706 c 23.1544,-10.56772 36.8917,-24.76204 44.675,-46.16106 l 1.7395,-4.78265 -0.1054,20.63323 -0.1054,20.63323 -10.227,2.53906 c -13.9468,3.46261 -40.1127,9.6311 -40.8327,9.62614 -0.3225,-0.002 1.8627,-1.1218 4.856,-2.48795 z"
       id="path6304" />
    <path
       style="fill:#502d16;stroke-width:0.511346"
       d="m 1673.2605,365.54203 c -1.774,-6.65545 -6.3715,-15.38864 -11.6728,-22.17289 -7.3872,-9.45358 -16.4615,-16.52147 -30.6482,-23.87149 -4.2186,-2.18563 -7.2774,-3.97905 -6.7974,-3.98538 1.5313,-0.0202 48.5349,10.64487 49.4749,11.22579 0.3723,0.23012 0.5011,6.75838 0.4094,20.75571 -0.1135,17.32426 -0.2296,20.06044 -0.7659,18.04826 z"
       id="path6343" />
    <path
       style="fill:#917c6f;stroke-width:0.723153"
       d="m 226.70849,528.80772 c -21.51527,-15.13434 -35.02069,-24.82362 -35.35547,-25.36531 -0.55934,-0.90502 40.59264,-30.20467 41.3539,-29.44341 0.70381,0.70381 -5.78846,8.25494 -13.16117,15.30771 -9.02268,8.63112 -11.27929,12.41509 -9.94847,16.68193 1.07587,3.44942 2.40703,4.93162 11.10621,12.36634 5.95236,5.08718 10.14167,9.70206 12.44106,13.7049 0.93982,1.63608 -0.57503,0.87062 -6.43606,-3.25216 z"
       id="path6382" />
    <path
       style="fill:#917c6f;stroke-width:2.04539"
       d="m 1434.7961,721.95324 c -1.882,-3.04523 -4.4989,-298.76305 -3.3796,-381.90785 l 0.7779,-57.78215 h 4.841 c 6.5894,0 122.7036,21.26317 152.0212,27.83857 38.6265,8.66322 65.6125,25.54596 77.1143,48.24355 l 4.9093,9.68809 v 134.10876 134.10877 l -4.9004,9.64757 c -8.176,16.09627 -20.4805,28.25957 -36.6523,36.23176 -18.2194,8.98158 -48.192,16.48115 -117.9874,29.52208 -68.1678,12.7368 -74.6968,13.61317 -76.744,10.30085 z"
       id="path6458" />
    <path
       style="fill:#917c6f;stroke-width:2.04539"
       d="m 953.14978,777.98793 c -3.93737,-0.35716 -20.9652,-1.65009 -37.83963,-2.87317 -282.197,-20.45419 -524.88151,-101.94839 -724.24798,-243.20472 -14.43049,-10.22437 -29.7274,-19.52957 -33.99313,-20.67821 -6.22458,-1.67612 -7.75588,-3.05115 -7.75588,-6.96444 0,-3.75846 1.63987,-5.4172 7.15494,-7.23735 3.93522,-1.29874 18.8921,-10.70351 33.23752,-20.89947 70.66419,-50.2244 115.35313,-76.9551 187.66806,-112.25371 149.57066,-73.00893 304.55447,-113.01983 511.34645,-132.01013 69.14322,-6.34962 268.41927,-5.57441 374.30557,1.45609 117.5944,7.80788 252.499,29.90096 400.3843,65.57024 l 34.2602,8.26341 v 94.42479 c 0,51.93364 -0.6104,139.19438 -1.3537,193.91275 l -1.3514,99.48795 -7.3392,2.16709 c -4.0366,1.19191 -25.2875,6.28688 -47.2242,11.32219 -171.8706,39.45073 -343.1676,63.82132 -483.7338,68.82128 -48.9363,1.74069 -186.79942,2.21176 -203.51587,0.69541 z m 254.65052,-22.18274 c 165.2912,-13.48582 272.9296,-29.60726 419.5199,-62.83314 l 47.2597,-10.71179 1.3182,-27.48682 c 0.7251,-15.11773 1.3183,-95.75823 1.3183,-179.20107 v -151.7143 l -19.9426,-4.58333 c -122.9274,-28.25206 -250.4077,-49.53218 -367.9335,-61.41866 -104.9347,-10.61303 -118.5607,-11.22625 -249.2616,-11.21777 -137.23778,0.009 -154.47449,1.04846 -253.62786,15.29634 -198.67712,28.54899 -372.31286,91.07121 -527.70954,190.01601 -26.00001,16.55484 -65.07788,43.99817 -68.46842,48.08352 -3.69885,4.45683 -1.53495,6.5472 28.41349,27.44793 163.5099,114.11207 361.51975,190.14643 572.87793,219.98102 30.5794,4.31648 73.80611,8.94756 113.51892,12.16182 5.62481,0.45526 67.29319,0.49547 137.04088,0.0894 90.5487,-0.52724 137.9274,-1.64512 165.6762,-3.9091 z"
       id="path6497" />
    <path
       style="fill:#917c6f;stroke-width:2.04539"
       d="m 986.89865,756.85826 -40.90772,-1.08821 0.0128,-79.2587 c 0.007,-43.59228 0.23713,-156.94859 0.51134,-251.90291 l 0.49856,-172.64422 18.91982,-1.14894 c 10.4059,-0.63193 29.27459,-1.57427 41.93045,-2.0941 l 23.0105,-0.94514 v 255.53104 c 0,140.54208 -0.6903,255.33042 -1.534,255.08522 -0.8437,-0.2452 -19.9425,-0.93552 -42.44174,-1.53404 z"
       id="path6536" />
    <path
       style="fill:#784421"
       d="m 476.57489,659.44537 c -3.93737,-1.70473 -15.67921,-6.83406 -26.09299,-11.39855 l -18.93414,-8.29903 0.52567,-137.01923 0.52567,-137.01924 23.52193,-9.80425 c 12.93707,-5.39234 25.59289,-10.42338 28.12406,-11.18009 l 4.60212,-1.37583 v 42.75406 c 0,83.47096 -2.73393,276.60054 -3.91443,276.52173 -0.65947,-0.044 -4.42052,-1.47484 -8.35789,-3.17957 z"
       id="path6575" />
    <path
       style="fill:#917c6f;stroke-width:0.511346"
       d="m 1632.0636,686.26307 c 9.1173,-4.75956 15.2344,-9.03958 21.417,-14.98505 7.9408,-7.63629 13.7545,-16.47695 18.0795,-27.49284 l 1.5057,-3.8351 0.03,19.24022 0.03,19.24022 -5.497,1.37798 c -8.6808,2.17611 -41.532,9.99894 -41.9429,9.98781 -0.204,-0.006 2.666,-1.59549 6.3779,-3.53324 z"
       id="path6653" />
    <path
       style="fill:#917c6f;stroke-width:0.511346"
       d="m 1672.6565,362.75649 c -0.9423,-3.19132 -4.896,-10.95209 -7.7948,-15.30065 -7.5482,-11.32301 -16.7007,-18.92209 -34.6892,-28.80158 -2.1093,-1.15845 -3.4159,-2.1118 -2.9036,-2.11854 0.984,-0.013 24.7095,5.23953 38.3143,8.48225 l 8.0537,1.91961 v 19.08189 c 0,10.49504 -0.065,19.0819 -0.144,19.0819 -0.079,0 -0.4556,-1.0552 -0.8364,-2.34488 z"
       id="path6692" />
    <path
       style="fill:#917c6f;stroke-width:0.511346"
       d=""
       id="path6731" />
    <path
       style="fill:#917c6f;stroke-width:0.511346"
       d=""
       id="path6770" />
    <path
       style="fill:#ffeeaa;stroke-width:2.04539"
       d="M 1034.9652,503.10751 V 247.20112 l 41.4191,1.25316 c 127.2691,3.8506 198.3462,9.81714 332.3574,27.8996 l 18.9021,2.5505 0.5291,224.29286 0.5291,224.29286 -39.885,5.45226 c -105.7201,14.45194 -185.381,20.71477 -316.5235,24.88466 l -37.3283,1.18691 z"
       id="path6809" />
    <path
       style="fill:#ffeeaa;stroke-width:2.04539"
       d="M 905.08322,755.3785 C 770.43406,746.46639 632.43061,718.18656 516.58865,675.76771 l -25.69606,-9.40935 V 503.22893 340.09949 L 537.42512,324.598 c 125.28059,-41.73503 243.88162,-63.90872 393.73677,-73.61317 l 11.76096,-0.76163 v 253.28478 253.28477 l -13.80635,-0.36869 c -7.5935,-0.20269 -18.40847,-0.67327 -24.03328,-1.04556 z"
       id="path6885" />
    <path
       style="fill:#ffeeaa;stroke-width:2.04539"
       d="M 381.46445,617.82103 C 318.93803,586.83421 235.21937,537.0504 235.21937,530.85549 c 0,-1.42239 -4.37202,-6.69166 -9.71559,-11.70948 -16.88184,-15.85271 -16.77188,-13.84706 -1.66185,-30.31218 7.38255,-8.04463 13.42282,-15.36674 13.42282,-16.27136 0,-2.26665 52.19407,-34.87878 86.9289,-54.3153 15.74947,-8.8129 45.20303,-24.06669 65.45234,-33.89729 l 36.81695,-17.87383 0.53855,68.34443 c 0.29621,37.58943 0.29621,99.15963 0,136.82265 l -0.53855,68.47823 z"
       id="path6924" />
    <path
       style="fill:#784421;stroke-width:2.04539"
       d="m 964.98426,755.2709 -17.82361,-0.68067 -0.58486,-180.42673 c -0.32167,-99.23469 -0.33127,-211.85735 -0.0213,-250.27256 l 0.56352,-69.84582 4.54995,-1.08966 c 2.50247,-0.59931 21.34767,-1.74071 41.87823,-2.53646 l 37.32821,-1.4468 v 78.69156 c 0,43.28037 -0.6118,157.53998 -1.3596,253.91027 l -1.3596,175.21872 -22.6737,-0.42062 c -12.47044,-0.23131 -30.69421,-0.72689 -40.4972,-1.10123 z"
       id="path7037" />
    <path
       style="fill:#784421;stroke-width:2.04539"
       d="m 1444.7487,722.42446 -8.4978,-0.61943 -1.2683,-22.90251 c -1.9726,-35.62316 -4.4259,-388.0064 -2.7012,-388.00507 0.8437,6.6e-4 1.534,-6.41876 1.534,-14.26537 v -14.26657 l 5.6249,0.95487 c 83.7917,14.22452 151.8644,27.73096 168.3487,33.40239 27.6851,9.52507 46.603,23.44261 57.3626,42.20065 l 5.8902,10.26872 0.018,133.0704 0.018,133.07041 -7.291,12.15199 c -10.6543,17.75756 -18.3693,24.83051 -36.6848,33.63135 -18.2724,8.78017 -48.0104,16.63087 -101.2466,26.72857 -19.6868,3.73414 -36.1029,7.53674 -36.4803,8.45021 -0.3773,0.91345 -1.4696,1.17655 -2.4273,0.58465 -2.0128,-1.24396 -31.1506,3.18949 -32.6809,4.97256 -0.5625,0.65538 -4.8467,0.91285 -9.5205,0.57218 z"
       id="path7076" />
    <path
       style="fill:#784421;stroke-width:2.04539"
       d=""
       id="path7115" />
    <path
       style="fill:#784421;stroke-width:2.04539"
       d="m 943.66263,776.56019 c -1.67615,-0.94 -8.51292,-1.40021 -15.19282,-1.02269 -6.67988,0.37754 -12.3735,0.0607 -12.65245,-0.70394 -0.27897,-0.76471 -10.63715,-1.85784 -23.01816,-2.4292 -12.38103,-0.57136 -23.88632,-1.48043 -25.56732,-2.02015 -5.74782,-1.84545 -47.11041,-5.60299 -48.97715,-4.44929 -1.02472,0.63332 -2.36635,0.33727 -2.98138,-0.65789 -0.61504,-0.99517 -6.89152,-2.44698 -13.94769,-3.22627 -24.75365,-2.7338 -96.62079,-15.61288 -132.90917,-23.81823 C 494.11898,698.82121 344.96839,635.13265 206.396,540.9459 c -18.66525,-12.68665 -38.68446,-25.47245 -44.48714,-28.41288 -5.80267,-2.94045 -10.55031,-6.64384 -10.55031,-8.22977 0,-1.58594 4.83699,-5.65096 10.74887,-9.03339 5.91188,-3.38243 25.47089,-16.41402 43.46445,-28.95904 104.27961,-72.70334 212.93871,-127.00185 331.3419,-165.57631 37.16258,-12.10716 102.25035,-29.68395 129.37065,-34.93622 7.03102,-1.36166 12.78367,-3.24754 12.78367,-4.19083 0,-0.94329 1.22913,-1.24341 2.73138,-0.66694 1.50228,0.57647 17.37958,-1.67949 35.28291,-5.01326 17.90334,-3.33376 47.7385,-8.1596 66.30038,-10.72408 18.56188,-2.56448 34.05758,-5.40547 34.43491,-6.3133 0.37733,-0.90784 1.58924,-1.09241 2.69314,-0.41016 2.14362,1.32483 49.76724,-2.82633 54.91431,-4.78666 1.68745,-0.64269 3.76942,-1.01873 4.6266,-0.83564 0.85718,0.18308 18.20422,-0.57546 38.54898,-1.68566 58.56428,-3.1958 242.8925,-2.26467 319.8804,1.61588 12.3746,0.62374 28.2519,1.19593 35.2829,1.27155 7.031,0.0756 12.7837,0.8278 12.7837,1.67152 0,0.84372 3.9118,1.53461 8.6929,1.5353 19.6882,0.003 111.5052,11.74808 169.735,21.7125 16.5756,2.83646 30.9937,4.62804 32.0401,3.98129 1.0465,-0.64675 2.2114,-0.42924 2.5887,0.48336 0.3774,0.9126 18.1741,5.07799 39.5484,9.25644 21.3743,4.17844 58.9367,12.20175 83.4721,17.82957 24.5354,5.62782 45.3964,9.74623 46.3578,9.15203 0.9615,-0.5942 2.0568,-0.29469 2.4341,0.66558 0.3774,0.96027 6.2086,3.08121 12.9584,4.71321 l 12.2723,2.96727 -0.5574,148.19212 c -0.3066,81.50567 -1.095,168.5361 -1.7519,193.40096 l -1.1945,45.20883 -9.4977,2.26635 c -100.2145,23.91314 -218.4988,47.22066 -277.9546,54.76999 -5.9061,0.74992 -10.7383,2.21966 -10.7383,3.26608 0,1.04641 -0.9247,1.33109 -2.0549,0.63259 -2.2341,-1.38078 -76.3633,7.44697 -77.2086,9.19446 -0.2839,0.58688 -4.6559,0.73781 -9.7156,0.3354 -5.0596,-0.40243 -9.2064,0.0513 -9.2149,1.00834 -0.01,0.95699 -6.2215,1.86893 -13.8064,2.02653 -7.5849,0.15749 -31.7391,1.89112 -53.6758,3.8523 -44.0645,3.93939 -279.94931,7.55596 -285.61427,4.37898 z m 232.43417,-18.20043 c 46.4921,-2.33354 66.6416,-3.98343 68.2464,-5.58822 0.9873,-0.98739 3.0604,-1.30977 4.6068,-0.71638 3.0688,1.17759 71.4797,-5.0198 76.46,-6.92655 1.6874,-0.64604 6.0364,-0.97864 9.6645,-0.7391 3.628,0.23955 7.5745,-0.16895 8.7699,-0.90783 1.1955,-0.73883 8.7542,-1.75813 16.7972,-2.26506 8.043,-0.50695 15.6865,-1.80384 16.9855,-2.88199 1.2991,-1.07814 2.8779,-1.44435 3.5085,-0.8138 1.2036,1.20367 47.382,-4.5536 52.6798,-6.56783 1.6875,-0.64158 7.0542,-1.5106 11.926,-1.93117 10.6413,-0.91863 77.8093,-12.7269 82.1618,-14.44421 1.6874,-0.66579 6.6696,-1.57618 11.0715,-2.02305 4.4019,-0.4469 9.0887,-1.71322 10.4151,-2.81406 1.3265,-1.10085 2.9777,-1.4356 3.6693,-0.74391 0.6918,0.69171 2.9081,0.54227 4.9253,-0.33209 2.0172,-0.87434 5.1968,-1.40422 7.0659,-1.17751 1.869,0.22673 4.0036,-0.56724 4.7434,-1.76439 0.7399,-1.19714 2.1337,-1.68934 3.0973,-1.09379 1.9438,1.20132 78.1557,-15.19359 79.7807,-17.16267 0.5625,-0.68156 3.784,-1.43582 7.1589,-1.67613 14.5469,-1.03578 14.8816,-1.39407 16.3059,-17.45526 0.7235,-8.1587 1.0324,-89.3294 0.6863,-180.37936 l -0.6291,-165.54535 -16.3631,-3.65279 c -8.9997,-2.00904 -17.4542,-3.27018 -18.7877,-2.80253 -1.3335,0.46764 -2.7142,0.14045 -3.0681,-0.7271 -0.8992,-2.20421 -62.361,-15.20941 -64.7885,-13.70913 -1.0893,0.67325 -2.2893,0.43163 -2.6667,-0.53693 -0.8254,-2.11891 -71.1383,-15.42284 -72.7888,-13.77239 -0.6351,0.6351 -2.1804,0.30351 -3.4339,-0.73686 -2.6007,-2.15841 -76.9807,-13.91707 -136.1607,-21.52551 -59.6286,-7.66611 -138.2819,-15.12249 -183.6581,-17.41091 -50.6743,-2.55559 -210.13883,-2.59484 -259.85801,-0.064 -41.03084,2.08863 -98.51116,8.11601 -98.51116,10.32989 0,0.76718 -2.28569,0.95794 -5.07934,0.4239 -2.79365,-0.53404 -6.70545,-0.26027 -8.69289,0.60836 -1.98744,0.86864 -4.4391,1.38814 -5.44811,1.15444 -2.3677,-0.54837 -31.98292,3.87194 -36.00507,5.37405 -1.68745,0.63019 -5.05112,0.9546 -7.47484,0.72091 -2.42373,-0.2337 -5.01848,0.56488 -5.76615,1.77463 -0.74765,1.20974 -2.1856,1.68889 -3.19545,1.06478 -2.78968,-1.72413 -91.53212,15.69933 -96.99595,19.04393 -1.07737,0.6595 -3.83864,1.40582 -6.13616,1.65848 -6.50748,0.71565 -45.20665,10.78347 -51.61441,13.42779 -3.15861,1.30348 -6.38999,2.23574 -7.18088,2.07169 -2.8788,-0.59713 -59.94316,18.53808 -60.60965,20.32404 -0.37733,1.01111 -1.45317,1.36427 -2.39077,0.7848 -1.672,-1.03336 -30.70893,8.83118 -32.71744,11.11489 -0.56248,0.63955 -2.75855,1.462 -4.88015,1.82768 -11.91161,2.05304 -91.90779,37.86484 -134.14806,60.05392 -66.63173,35.00206 -159.59812,95.41032 -159.59812,103.70461 0,6.51198 60.31387,47.85562 119.69943,82.05098 35.57529,20.48495 109.31624,57.36049 115.66095,57.83844 2.17236,0.16363 3.94976,0.92177 3.94976,1.68476 0,2.813 87.37706,37.20107 90.15781,35.48245 0.84433,-0.52182 1.84387,-0.11331 2.2212,0.90801 0.74023,2.00346 76.05808,26.72331 84.00295,27.57037 2.64426,0.28191 5.69777,1.06266 6.78559,1.73496 2.45696,1.51849 27.03333,7.94788 32.70717,8.55648 2.29752,0.24645 5.05988,0.99355 6.1386,1.66022 2.94394,1.81945 67.00843,15.79711 76.19728,16.62479 4.39282,0.3957 8.82083,1.23482 9.84003,1.86472 2.45708,1.51856 71.19558,12.14986 74.74253,11.55989 1.51913,-0.25267 4.1427,0.10145 5.83014,0.787 1.68745,0.68553 20.55613,3.08839 41.93041,5.33966 35.64001,3.75386 49.80124,4.02853 170.78976,3.31275 72.56,-0.42926 138.8305,-1.12697 147.2677,-1.55046 z"
       id="path7154" />
    <path
       style="fill:#784421;stroke-width:1.02269"
       d="m 1637.0757,684.15127 c 2.953,-1.69355 5.3691,-3.55724 5.3691,-4.14153 0,-0.5843 0.4462,-0.78662 0.9915,-0.44959 1.3415,0.82909 20.8249,-18.54596 19.9969,-19.88569 -0.3604,-0.58313 -0.1756,-1.06023 0.4106,-1.06023 1.0718,0 6.4365,-9.6477 5.7596,-10.35805 -0.1993,-0.20912 0.2816,-0.97364 1.0686,-1.69892 1.2068,-1.11216 1.4309,-0.69684 1.4309,2.65185 0,2.18379 0.3008,9.56532 0.6685,16.4034 0.5997,11.15267 0.4944,12.43288 -1.0227,12.43288 -0.9302,0 -1.6912,0.41713 -1.6912,0.92695 0,0.50982 -0.9204,0.68625 -2.0454,0.39207 -1.1888,-0.31089 -2.0454,-0.0314 -2.0454,0.66745 0,0.66128 -0.4213,0.94191 -0.9363,0.62363 -0.515,-0.31828 -7.5091,1.03519 -15.5424,3.00772 -8.0333,1.97253 -15.3205,3.5821 -16.1937,3.57682 -0.8733,-0.005 0.8283,-1.39522 3.7814,-3.08876 z"
       id="path7193" />
    <path
       style="fill:#64391c;stroke-width:1.02269;fill-opacity:1"
       d="m 1668.5636,353.09587 c -3.5915,-6.98083 -17.4258,-23.6184 -18.6342,-22.41001 -0.2186,0.21864 -1.8088,-0.9208 -3.5337,-2.53209 -1.7249,-1.61129 -3.5496,-2.67411 -4.0549,-2.36182 -0.5053,0.31229 -0.9187,0.10915 -0.9187,-0.45142 0,-0.56057 -2.3488,-2.29761 -5.2196,-3.86008 -2.8708,-1.56247 -4.7912,-2.98364 -4.2677,-3.15815 0.5235,-0.17451 7.9744,1.30784 16.5576,3.29412 8.5831,1.98628 16.0261,3.35156 16.54,3.03396 0.5139,-0.31759 0.9343,-0.0901 0.9343,0.50561 0,0.59567 1.0355,1.09009 2.3011,1.09871 4.7684,0.0324 4.9275,0.65785 4.6283,18.19299 l -0.2819,16.52153 z"
       id="path7232" />
    <path
       style="fill:url(#meshgradient8000);fill-opacity:1;stroke-width:1.44631;filter:url(#filter11282)"
       d="m 1435.6829,699.03709 c -1.9206,-45.74513 -3.9967,-371.06887 -2.454,-384.53598 0.8157,-7.12045 1.4884,-17.07122 1.495,-22.11281 l 0.012,-9.16655 6.1468,0.99324 c 39.6441,6.40594 127.0057,23.20867 151.09,29.05996 35.6337,8.65721 60.5369,24.9961 73.8881,48.47765 l 4.623,8.13073 v 132.53799 132.538 l -7.8933,12.76058 c -4.3414,7.01833 -10.725,15.37061 -14.1857,18.56061 -17.0575,15.72305 -45.7389,25.61744 -112.4274,38.78472 -14.7162,2.90563 -30.6236,6.26165 -35.3499,7.45784 -11.55,2.92324 -42.6638,7.91634 -54.4517,8.73832 l -9.5317,0.66465 z"
       id="path7604" />
    <path
       style="fill:url(#meshgradient11294);fill-opacity:1;stroke-width:1.44631;filter:url(#filter11648)"
       d="m 977.70297,754.89995 c -15.51163,-0.5444 -28.6911,-1.07635 -29.2877,-1.18212 -0.5966,-0.10578 -1.08473,-112.41013 -1.08473,-249.56521 v -249.3729 l 3.97734,-0.84282 c 5.04557,-1.06919 52.35232,-3.66147 67.48832,-3.69818 l 11.444,-0.0277 -0.9985,241.17155 c -0.5492,132.64436 -1.4018,246.54097 -1.8948,253.10358 l -0.8963,11.93203 -10.2723,-0.26419 c -5.6498,-0.14529 -22.9637,-0.7096 -38.47533,-1.25399 z"
       id="path7643" />
    <path
       style="fill:url(#meshgradient13192);fill-opacity:1;stroke-width:1.44631;filter:url(#filter13206)"
       d="M 457.03275,650.33663 433.1687,639.86705 432.86963,507.76123 c -0.16448,-72.6582 0.18693,-134.4449 0.78091,-137.30377 1.07982,-5.19718 1.08383,-5.19951 27.05573,-15.71458 14.28667,-5.78415 26.51124,-10.51784 27.16572,-10.51932 0.65447,-0.001 0.81953,30.42397 0.36678,67.61212 -0.45275,37.18815 -1.15805,98.85503 -1.56734,137.03751 -0.89905,83.87161 -1.95035,112.11844 -4.16885,112.01087 -0.88318,-0.0428 -12.3446,-4.78916 -25.46983,-10.54743 z"
       id="path7682" />
    <path
       style="fill:url(#meshgradient13210);fill-opacity:1;stroke-width:1.44631;filter:url(#filter13448)"
       d="m 930.69802,775.27087 c -28.66453,-2.17487 -65.15731,-5.61713 -68.69954,-6.48023 -1.98867,-0.48456 -13.37834,-1.79179 -25.31036,-2.90495 C 785.39895,761.10082 689.80381,743.56577 626.25057,727.28508 525.53384,701.48406 427.18534,664.55329 342.05141,620.56565 293.37276,595.41401 261.85045,576.64735 197.08401,534.25996 180.19394,523.206 163.27216,512.20933 159.48005,509.82292 c -3.79211,-2.3864 -6.81665,-4.98975 -6.7212,-5.78522 0.20978,-1.74821 80.84735,-56.23518 111.19203,-75.13267 90.95317,-56.64214 193.2266,-103.39623 290.70754,-132.89636 30.05947,-9.09674 77.73078,-21.95568 97.62566,-26.33372 9.14789,-2.01307 19.88671,-4.58235 23.86405,-5.70952 3.97735,-1.12717 30.01086,-5.70834 57.85225,-10.18039 27.84139,-4.47205 58.10535,-9.4284 67.25324,-11.01411 19.04159,-3.30072 21.12716,-3.53537 42.41933,-4.77268 8.61448,-0.5006 20.9804,-1.81267 27.47982,-2.9157 6.51761,-1.10612 35.16724,-2.80133 63.88417,-3.78005 92.63136,-3.15703 325.68186,0.5985 357.23766,5.75675 4.7728,0.78019 17.4641,2.13598 28.2029,3.01286 23.9769,1.95785 82.4877,9.72825 131.0931,17.40952 19.998,3.16035 38.7523,5.74609 41.6763,5.74609 2.9241,0 6.4614,0.61276 7.8608,1.36169 1.3994,0.74893 19.7428,4.94992 40.7631,9.33553 21.0203,4.38562 56.1167,11.87761 77.9921,16.64886 21.8754,4.77126 42.0514,8.94699 44.8355,9.27941 2.7841,0.33242 7.34,1.59299 10.1241,2.80126 2.7842,1.20827 8.7913,3.02017 13.3493,4.02644 l 8.2871,1.82958 -0.6895,74.62271 c -0.3792,41.04248 -1.0152,122.45928 -1.4132,180.92621 -0.398,58.46692 -1.1475,111.67382 -1.6654,118.23755 l -0.9416,11.93404 -5.9207,1.59427 c -35.2764,9.49895 -182.3222,39.78012 -233.7371,48.13352 -17.1026,2.77867 -36.9531,6.07547 -44.1123,7.32624 -7.1593,1.25075 -26.359,3.86205 -42.6661,5.80288 -16.3071,1.94083 -35.2747,4.53661 -42.1502,5.76842 -6.8755,1.23179 -14.9718,2.23963 -17.9917,2.23963 -3.02,0 -9.1097,0.62125 -13.5326,1.38055 -10.6776,1.83303 -67.7097,5.65222 -110.0064,7.36663 -44.0095,1.78383 -232.1335,2.85419 -250.93408,1.42773 z M 1199.711,757.83652 c 13.5229,-0.85091 29.143,-2.19484 34.7113,-2.98651 5.5683,-0.79166 14.68,-1.73055 20.2483,-2.08641 21.0286,-1.34392 46.834,-3.69673 62.1912,-5.6703 8.7501,-1.12449 22.7431,-2.77794 31.0955,-3.67433 8.3525,-0.89639 18.4405,-2.29991 22.4178,-3.11894 3.9773,-0.81903 10.1603,-1.76759 13.7399,-2.10791 19.7198,-1.87476 35.2732,-3.81062 45.5586,-5.67049 6.3638,-1.15074 23.611,-4.02693 38.3272,-6.39156 30.6677,-4.92776 79.1944,-14.15893 81.3125,-15.46797 0.7864,-0.48601 4.7785,-1.13218 8.8714,-1.43593 4.093,-0.30375 9.0688,-1.17311 11.0575,-1.9319 1.9887,-0.75881 15.0054,-3.67748 28.9261,-6.48596 13.9207,-2.80847 31.8188,-6.77458 39.7734,-8.81356 7.9547,-2.03898 17.7173,-4.33868 21.6946,-5.11044 3.9774,-0.77175 8.6135,-1.70504 10.3026,-2.07394 7.2129,-1.57536 7.0589,2.53861 6.9727,-186.15626 -0.045,-96.82625 -0.3697,-176.33477 -0.7232,-176.68561 -0.3534,-0.35085 -8.1273,-2.04704 -17.2752,-3.76931 -9.1479,-1.72227 -21.1884,-4.37062 -26.7567,-5.88521 -5.5683,-1.5146 -20.5375,-4.74147 -33.265,-7.17084 -12.7275,-2.42937 -28.673,-5.66547 -35.4345,-7.19133 -15.3731,-3.46924 -39.8963,-8.05939 -57.8523,-10.82855 -7.5569,-1.16542 -20.5737,-3.38779 -28.9261,-4.9386 -75.163,-13.95559 -213.5798,-30.27337 -295.0465,-34.78266 -43.3256,-2.39813 -157.0728,-3.27252 -219.8385,-1.68994 -58.76984,1.48184 -93.93845,3.7502 -127.27494,8.20919 -9.14789,1.2236 -24.11716,3.18706 -33.26504,4.36325 -19.74202,2.53833 -50.45134,7.5722 -53.51333,8.77189 -1.1932,0.4675 -5.08874,1.13112 -8.65675,1.47471 -10.6813,1.02858 -58.7947,10.40472 -77.39847,15.08309 -9.54562,2.40048 -23.89911,5.89183 -31.89663,7.75855 -7.99752,1.86672 -21.66512,5.47015 -30.37243,8.00763 -8.70731,2.53747 -19.29513,5.53308 -23.5285,6.6569 -6.4014,1.69937 -20.97483,6.57427 -53.04783,17.74481 -2.38641,0.83115 -10.8473,3.73452 -18.80198,6.45194 -36.23422,12.37805 -62.45684,23.21174 -110.64242,45.71115 -54.74846,25.56383 -109.63031,56.97758 -167.21347,95.71112 -25.85885,17.39406 -38.16201,27.63805 -38.16201,31.77487 0,7.90139 85.21941,64.27803 146.80008,97.11515 30.42545,16.22398 63.70924,32.70979 78.10053,38.68398 6.36375,2.64176 15.15006,6.60816 19.52513,8.81422 15.65964,7.89612 74.53924,30.8083 82.57843,32.13426 1.91224,0.31538 6.40556,1.88518 9.98517,3.48841 8.58527,3.84515 55.82515,19.3585 75.93107,24.93541 27.69946,7.68317 84.59995,21.4178 104.8572,25.3104 10.73882,2.06357 26.03351,5.03646 33.9882,6.60644 16.96836,3.34897 48.03976,8.17113 64.82309,10.06029 6.50712,0.73245 21.91912,2.66495 34.24888,4.29443 12.32976,1.62948 29.90238,3.57985 39.05026,4.33418 21.8221,1.79939 289.54266,0.65814 321.80316,-1.37181 z"
       id="path7721" />
    <path
       style="fill:#64391c;fill-opacity:1;stroke-width:1.44631;filter:url(#filter13582)"
       d="m 1645.5733,678.67917 c 10.6106,-8.52939 20.1922,-19.49393 23.689,-27.10815 l 2.6615,-5.79532 -0.3585,15.90937 -0.3585,15.90937 -15.1862,3.85601 c -8.3525,2.1208 -16.0429,3.91061 -17.0899,3.97734 -1.047,0.0667 1.9421,-2.97015 6.6426,-6.74862 z"
       id="path7760" />
    <path
       style="fill:url(#meshgradient13586);fill-opacity:1;stroke-width:1.44631;filter:url(#filter13712)"
       d="m 1668.8676,352.74962 c -4.1401,-8.69571 -15.2414,-20.88014 -24.2567,-26.62355 -4.8268,-3.07499 -8.5713,-5.79552 -8.3212,-6.04563 0.7828,-0.78279 33.3026,6.76124 34.5583,8.01693 0.6558,0.65577 1.0048,7.57621 0.7756,15.37877 l -0.4168,14.18646 z"
       id="path7799" />
    <path
       style="fill:#64391c;fill-opacity:1;stroke-width:0.723153;filter:url(#filter15085)"
       d="m 211.90293,517.812 c -10.52946,-7.51291 -19.24868,-13.97245 -19.37605,-14.35454 -0.30529,-0.91587 25.81747,-20.11987 36.89344,-27.122 3.92942,-2.48415 1.68495,0.13253 -8.05284,10.52069 -5.07539,5.41437 -7.96697,11.78609 -8.84389,12.87459 -3.35394,4.16316 -2.30411,10.25245 5.49532,16.53781 8.86151,7.14126 15.43734,15.30019 13.59631,15.22612 -0.3123,-0.0126 -9.18282,-6.16976 -19.71229,-13.68267 z"
       id="path7838"
       sodipodi:nodetypes="ssssssss" />
  </g>
  <script
     id="mesh_polyfill"
     type="text/javascript">
!function(){const t=&quot;http://www.w3.org/2000/svg&quot;,e=&quot;http://www.w3.org/1999/xlink&quot;,s=&quot;http://www.w3.org/1999/xhtml&quot;,r=2;if(document.createElementNS(t,&quot;meshgradient&quot;).x)return;const n=(t,e,s,r)=&gt;{let n=new x(.5*(e.x+s.x),.5*(e.y+s.y)),o=new x(.5*(t.x+e.x),.5*(t.y+e.y)),i=new x(.5*(s.x+r.x),.5*(s.y+r.y)),a=new x(.5*(n.x+o.x),.5*(n.y+o.y)),h=new x(.5*(n.x+i.x),.5*(n.y+i.y)),l=new x(.5*(a.x+h.x),.5*(a.y+h.y));return[[t,o,a,l],[l,h,i,r]]},o=t=&gt;{let e=t[0].distSquared(t[1]),s=t[2].distSquared(t[3]),r=.25*t[0].distSquared(t[2]),n=.25*t[1].distSquared(t[3]),o=e&gt;s?e:s,i=r&gt;n?r:n;return 18*(o&gt;i?o:i)},i=(t,e)=&gt;Math.sqrt(t.distSquared(e)),a=(t,e)=&gt;t.scale(2/3).add(e.scale(1/3)),h=t=&gt;{let e,s,r,n,o,i,a,h=new g;return t.match(/(\w+\(\s*[^)]+\))+/g).forEach(t=&gt;{let l=t.match(/[\w.-]+/g),d=l.shift();switch(d){case&quot;translate&quot;:2===l.length?e=new g(1,0,0,1,l[0],l[1]):(console.error(&quot;mesh.js: translate does not have 2 arguments!&quot;),e=new g(1,0,0,1,0,0)),h=h.append(e);break;case&quot;scale&quot;:1===l.length?s=new g(l[0],0,0,l[0],0,0):2===l.length?s=new g(l[0],0,0,l[1],0,0):(console.error(&quot;mesh.js: scale does not have 1 or 2 arguments!&quot;),s=new g(1,0,0,1,0,0)),h=h.append(s);break;case&quot;rotate&quot;:if(3===l.length&amp;&amp;(e=new g(1,0,0,1,l[1],l[2]),h=h.append(e)),l[0]){r=l[0]*Math.PI/180;let t=Math.cos(r),e=Math.sin(r);Math.abs(t)&lt;1e-16&amp;&amp;(t=0),Math.abs(e)&lt;1e-16&amp;&amp;(e=0),a=new g(t,e,-e,t,0,0),h=h.append(a)}else console.error(&quot;math.js: No argument to rotate transform!&quot;);3===l.length&amp;&amp;(e=new g(1,0,0,1,-l[1],-l[2]),h=h.append(e));break;case&quot;skewX&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),o=new g(1,0,n,1,0,0),h=h.append(o)):console.error(&quot;math.js: No argument to skewX transform!&quot;);break;case&quot;skewY&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),i=new g(1,n,0,1,0,0),h=h.append(i)):console.error(&quot;math.js: No argument to skewY transform!&quot;);break;case&quot;matrix&quot;:6===l.length?h=h.append(new g(...l)):console.error(&quot;math.js: Incorrect number of arguments for matrix!&quot;);break;default:console.error(&quot;mesh.js: Unhandled transform type: &quot;+d)}}),h},l=t=&gt;{let e=[],s=t.split(/[ ,]+/);for(let t=0,r=s.length-1;t&lt;r;t+=2)e.push(new x(parseFloat(s[t]),parseFloat(s[t+1])));return e},d=(t,e)=&gt;{for(let s in e)t.setAttribute(s,e[s])},c=(t,e,s,r,n)=&gt;{let o,i,a=[0,0,0,0];for(let h=0;h&lt;3;++h)e[h]&lt;t[h]&amp;&amp;e[h]&lt;s[h]||t[h]&lt;e[h]&amp;&amp;s[h]&lt;e[h]?a[h]=0:(a[h]=.5*((e[h]-t[h])/r+(s[h]-e[h])/n),o=Math.abs(3*(e[h]-t[h])/r),i=Math.abs(3*(s[h]-e[h])/n),a[h]&gt;o?a[h]=o:a[h]&gt;i&amp;&amp;(a[h]=i));return a},u=[[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],[-3,3,0,0,-2,-1,0,0,0,0,0,0,0,0,0,0],[2,-2,0,0,1,1,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,0,-3,3,0,0,-2,-1,0,0],[0,0,0,0,0,0,0,0,2,-2,0,0,1,1,0,0],[-3,0,3,0,0,0,0,0,-2,0,-1,0,0,0,0,0],[0,0,0,0,-3,0,3,0,0,0,0,0,-2,0,-1,0],[9,-9,-9,9,6,3,-6,-3,6,-6,3,-3,4,2,2,1],[-6,6,6,-6,-3,-3,3,3,-4,4,-2,2,-2,-2,-1,-1],[2,0,-2,0,0,0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,2,0,-2,0,0,0,0,0,1,0,1,0],[-6,6,6,-6,-4,-2,4,2,-3,3,-3,3,-2,-1,-2,-1],[4,-4,-4,4,2,2,-2,-2,2,-2,2,-2,1,1,1,1]],f=t=&gt;{let e=[];for(let s=0;s&lt;16;++s){e[s]=0;for(let r=0;r&lt;16;++r)e[s]+=u[s][r]*t[r]}return e},p=(t,e,s)=&gt;{const r=e*e,n=s*s,o=e*e*e,i=s*s*s;return t[0]+t[1]*e+t[2]*r+t[3]*o+t[4]*s+t[5]*s*e+t[6]*s*r+t[7]*s*o+t[8]*n+t[9]*n*e+t[10]*n*r+t[11]*n*o+t[12]*i+t[13]*i*e+t[14]*i*r+t[15]*i*o},y=t=&gt;{let e=[],s=[],r=[];for(let s=0;s&lt;4;++s)e[s]=[],e[s][0]=n(t[0][s],t[1][s],t[2][s],t[3][s]),e[s][1]=[],e[s][1].push(...n(...e[s][0][0])),e[s][1].push(...n(...e[s][0][1])),e[s][2]=[],e[s][2].push(...n(...e[s][1][0])),e[s][2].push(...n(...e[s][1][1])),e[s][2].push(...n(...e[s][1][2])),e[s][2].push(...n(...e[s][1][3]));for(let t=0;t&lt;8;++t){s[t]=[];for(let r=0;r&lt;4;++r)s[t][r]=[],s[t][r][0]=n(e[0][2][t][r],e[1][2][t][r],e[2][2][t][r],e[3][2][t][r]),s[t][r][1]=[],s[t][r][1].push(...n(...s[t][r][0][0])),s[t][r][1].push(...n(...s[t][r][0][1])),s[t][r][2]=[],s[t][r][2].push(...n(...s[t][r][1][0])),s[t][r][2].push(...n(...s[t][r][1][1])),s[t][r][2].push(...n(...s[t][r][1][2])),s[t][r][2].push(...n(...s[t][r][1][3]))}for(let t=0;t&lt;8;++t){r[t]=[];for(let e=0;e&lt;8;++e)r[t][e]=[],r[t][e][0]=s[t][0][2][e],r[t][e][1]=s[t][1][2][e],r[t][e][2]=s[t][2][2][e],r[t][e][3]=s[t][3][2][e]}return r};class x{constructor(t,e){this.x=t||0,this.y=e||0}toString(){return`(x=${this.x}, y=${this.y})`}clone(){return new x(this.x,this.y)}add(t){return new x(this.x+t.x,this.y+t.y)}scale(t){return void 0===t.x?new x(this.x*t,this.y*t):new x(this.x*t.x,this.y*t.y)}distSquared(t){let e=this.x-t.x,s=this.y-t.y;return e*e+s*s}transform(t){let e=this.x*t.a+this.y*t.c+t.e,s=this.x*t.b+this.y*t.d+t.f;return new x(e,s)}}class g{constructor(t,e,s,r,n,o){void 0===t?(this.a=1,this.b=0,this.c=0,this.d=1,this.e=0,this.f=0):(this.a=t,this.b=e,this.c=s,this.d=r,this.e=n,this.f=o)}toString(){return`affine: ${this.a} ${this.c} ${this.e} \n       ${this.b} ${this.d} ${this.f}`}append(t){t instanceof g||console.error(&quot;mesh.js: argument to Affine.append is not affine!&quot;);let e=this.a*t.a+this.c*t.b,s=this.b*t.a+this.d*t.b,r=this.a*t.c+this.c*t.d,n=this.b*t.c+this.d*t.d,o=this.a*t.e+this.c*t.f+this.e,i=this.b*t.e+this.d*t.f+this.f;return new g(e,s,r,n,o,i)}}class w{constructor(t,e){this.nodes=t,this.colors=e}paintCurve(t,e){if(o(this.nodes)&gt;r){const s=n(...this.nodes);let r=[[],[]],o=[[],[]];for(let t=0;t&lt;4;++t)r[0][t]=this.colors[0][t],r[1][t]=(this.colors[0][t]+this.colors[1][t])/2,o[0][t]=r[1][t],o[1][t]=this.colors[1][t];let i=new w(s[0],r),a=new w(s[1],o);i.paintCurve(t,e),a.paintCurve(t,e)}else{let s=Math.round(this.nodes[0].x);if(s&gt;=0&amp;&amp;s&lt;e){let r=4*(~~this.nodes[0].y*e+s);t[r]=Math.round(this.colors[0][0]),t[r+1]=Math.round(this.colors[0][1]),t[r+2]=Math.round(this.colors[0][2]),t[r+3]=Math.round(this.colors[0][3])}}}}class m{constructor(t,e){this.nodes=t,this.colors=e}split(){let t=[[],[],[],[]],e=[[],[],[],[]],s=[[[],[]],[[],[]]],r=[[[],[]],[[],[]]];for(let s=0;s&lt;4;++s){const r=n(this.nodes[0][s],this.nodes[1][s],this.nodes[2][s],this.nodes[3][s]);t[0][s]=r[0][0],t[1][s]=r[0][1],t[2][s]=r[0][2],t[3][s]=r[0][3],e[0][s]=r[1][0],e[1][s]=r[1][1],e[2][s]=r[1][2],e[3][s]=r[1][3]}for(let t=0;t&lt;4;++t)s[0][0][t]=this.colors[0][0][t],s[0][1][t]=this.colors[0][1][t],s[1][0][t]=(this.colors[0][0][t]+this.colors[1][0][t])/2,s[1][1][t]=(this.colors[0][1][t]+this.colors[1][1][t])/2,r[0][0][t]=s[1][0][t],r[0][1][t]=s[1][1][t],r[1][0][t]=this.colors[1][0][t],r[1][1][t]=this.colors[1][1][t];return[new m(t,s),new m(e,r)]}paint(t,e){let s,n=!1;for(let t=0;t&lt;4;++t)if((s=o([this.nodes[0][t],this.nodes[1][t],this.nodes[2][t],this.nodes[3][t]]))&gt;r){n=!0;break}if(n){let s=this.split();s[0].paint(t,e),s[1].paint(t,e)}else{new w([...this.nodes[0]],[...this.colors[0]]).paintCurve(t,e)}}}class b{constructor(t){this.readMesh(t),this.type=t.getAttribute(&quot;type&quot;)||&quot;bilinear&quot;}readMesh(t){let e=[[]],s=[[]],r=Number(t.getAttribute(&quot;x&quot;)),n=Number(t.getAttribute(&quot;y&quot;));e[0][0]=new x(r,n);let o=t.children;for(let t=0,r=o.length;t&lt;r;++t){e[3*t+1]=[],e[3*t+2]=[],e[3*t+3]=[],s[t+1]=[];let r=o[t].children;for(let n=0,o=r.length;n&lt;o;++n){let o=r[n].children;for(let r=0,i=o.length;r&lt;i;++r){let i=r;0!==t&amp;&amp;++i;let h,d=o[r].getAttribute(&quot;path&quot;),c=&quot;l&quot;;null!=d&amp;&amp;(c=(h=d.match(/\s*([lLcC])\s*(.*)/))[1]);let u=l(h[2]);switch(c){case&quot;l&quot;:0===i?(e[3*t][3*n+3]=u[0].add(e[3*t][3*n]),e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0].add(e[3*t+3][3*n+3])),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;L&quot;:0===i?(e[3*t][3*n+3]=u[0],e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0],e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0]),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;c&quot;:0===i?(e[3*t][3*n+1]=u[0].add(e[3*t][3*n]),e[3*t][3*n+2]=u[1].add(e[3*t][3*n]),e[3*t][3*n+3]=u[2].add(e[3*t][3*n])):1===i?(e[3*t+1][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+2][3*n+3]=u[1].add(e[3*t][3*n+3]),e[3*t+3][3*n+3]=u[2].add(e[3*t][3*n+3])):2===i?(e[3*t+3][3*n+2]=u[0].add(e[3*t+3][3*n+3]),e[3*t+3][3*n+1]=u[1].add(e[3*t+3][3*n+3]),0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2].add(e[3*t+3][3*n+3]))):(e[3*t+2][3*n]=u[0].add(e[3*t+3][3*n]),e[3*t+1][3*n]=u[1].add(e[3*t+3][3*n]));break;case&quot;C&quot;:0===i?(e[3*t][3*n+1]=u[0],e[3*t][3*n+2]=u[1],e[3*t][3*n+3]=u[2]):1===i?(e[3*t+1][3*n+3]=u[0],e[3*t+2][3*n+3]=u[1],e[3*t+3][3*n+3]=u[2]):2===i?(e[3*t+3][3*n+2]=u[0],e[3*t+3][3*n+1]=u[1],0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2])):(e[3*t+2][3*n]=u[0],e[3*t+1][3*n]=u[1]);break;default:console.error(&quot;mesh.js: &quot;+c+&quot; invalid path type.&quot;)}if(0===t&amp;&amp;0===n||r&gt;0){let e=window.getComputedStyle(o[r]).stopColor.match(/^rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)$/i),a=window.getComputedStyle(o[r]).stopOpacity,h=255;a&amp;&amp;(h=Math.floor(255*a)),e&amp;&amp;(0===i?(s[t][n]=[],s[t][n][0]=Math.floor(e[1]),s[t][n][1]=Math.floor(e[2]),s[t][n][2]=Math.floor(e[3]),s[t][n][3]=h):1===i?(s[t][n+1]=[],s[t][n+1][0]=Math.floor(e[1]),s[t][n+1][1]=Math.floor(e[2]),s[t][n+1][2]=Math.floor(e[3]),s[t][n+1][3]=h):2===i?(s[t+1][n+1]=[],s[t+1][n+1][0]=Math.floor(e[1]),s[t+1][n+1][1]=Math.floor(e[2]),s[t+1][n+1][2]=Math.floor(e[3]),s[t+1][n+1][3]=h):3===i&amp;&amp;(s[t+1][n]=[],s[t+1][n][0]=Math.floor(e[1]),s[t+1][n][1]=Math.floor(e[2]),s[t+1][n][2]=Math.floor(e[3]),s[t+1][n][3]=h))}}e[3*t+1][3*n+1]=new x,e[3*t+1][3*n+2]=new x,e[3*t+2][3*n+1]=new x,e[3*t+2][3*n+2]=new x,e[3*t+1][3*n+1].x=(-4*e[3*t][3*n].x+6*(e[3*t][3*n+1].x+e[3*t+1][3*n].x)+-2*(e[3*t][3*n+3].x+e[3*t+3][3*n].x)+3*(e[3*t+3][3*n+1].x+e[3*t+1][3*n+3].x)+-1*e[3*t+3][3*n+3].x)/9,e[3*t+1][3*n+2].x=(-4*e[3*t][3*n+3].x+6*(e[3*t][3*n+2].x+e[3*t+1][3*n+3].x)+-2*(e[3*t][3*n].x+e[3*t+3][3*n+3].x)+3*(e[3*t+3][3*n+2].x+e[3*t+1][3*n].x)+-1*e[3*t+3][3*n].x)/9,e[3*t+2][3*n+1].x=(-4*e[3*t+3][3*n].x+6*(e[3*t+3][3*n+1].x+e[3*t+2][3*n].x)+-2*(e[3*t+3][3*n+3].x+e[3*t][3*n].x)+3*(e[3*t][3*n+1].x+e[3*t+2][3*n+3].x)+-1*e[3*t][3*n+3].x)/9,e[3*t+2][3*n+2].x=(-4*e[3*t+3][3*n+3].x+6*(e[3*t+3][3*n+2].x+e[3*t+2][3*n+3].x)+-2*(e[3*t+3][3*n].x+e[3*t][3*n+3].x)+3*(e[3*t][3*n+2].x+e[3*t+2][3*n].x)+-1*e[3*t][3*n].x)/9,e[3*t+1][3*n+1].y=(-4*e[3*t][3*n].y+6*(e[3*t][3*n+1].y+e[3*t+1][3*n].y)+-2*(e[3*t][3*n+3].y+e[3*t+3][3*n].y)+3*(e[3*t+3][3*n+1].y+e[3*t+1][3*n+3].y)+-1*e[3*t+3][3*n+3].y)/9,e[3*t+1][3*n+2].y=(-4*e[3*t][3*n+3].y+6*(e[3*t][3*n+2].y+e[3*t+1][3*n+3].y)+-2*(e[3*t][3*n].y+e[3*t+3][3*n+3].y)+3*(e[3*t+3][3*n+2].y+e[3*t+1][3*n].y)+-1*e[3*t+3][3*n].y)/9,e[3*t+2][3*n+1].y=(-4*e[3*t+3][3*n].y+6*(e[3*t+3][3*n+1].y+e[3*t+2][3*n].y)+-2*(e[3*t+3][3*n+3].y+e[3*t][3*n].y)+3*(e[3*t][3*n+1].y+e[3*t+2][3*n+3].y)+-1*e[3*t][3*n+3].y)/9,e[3*t+2][3*n+2].y=(-4*e[3*t+3][3*n+3].y+6*(e[3*t+3][3*n+2].y+e[3*t+2][3*n+3].y)+-2*(e[3*t+3][3*n].y+e[3*t][3*n+3].y)+3*(e[3*t][3*n+2].y+e[3*t+2][3*n].y)+-1*e[3*t][3*n].y)/9}}this.nodes=e,this.colors=s}paintMesh(t,e){let s=(this.nodes.length-1)/3,r=(this.nodes[0].length-1)/3;if(&quot;bilinear&quot;===this.type||s&lt;2||r&lt;2){let n;for(let o=0;o&lt;s;++o)for(let s=0;s&lt;r;++s){let r=[];for(let t=3*o,e=3*o+4;t&lt;e;++t)r.push(this.nodes[t].slice(3*s,3*s+4));let i=[];i.push(this.colors[o].slice(s,s+2)),i.push(this.colors[o+1].slice(s,s+2)),(n=new m(r,i)).paint(t,e)}}else{let n,o,a,h,l,d,u;const x=s,g=r;s++,r++;let w=new Array(s);for(let t=0;t&lt;s;++t){w[t]=new Array(r);for(let e=0;e&lt;r;++e)w[t][e]=[],w[t][e][0]=this.nodes[3*t][3*e],w[t][e][1]=this.colors[t][e]}for(let t=0;t&lt;s;++t)for(let e=0;e&lt;r;++e)0!==t&amp;&amp;t!==x&amp;&amp;(n=i(w[t-1][e][0],w[t][e][0]),o=i(w[t+1][e][0],w[t][e][0]),w[t][e][2]=c(w[t-1][e][1],w[t][e][1],w[t+1][e][1],n,o)),0!==e&amp;&amp;e!==g&amp;&amp;(n=i(w[t][e-1][0],w[t][e][0]),o=i(w[t][e+1][0],w[t][e][0]),w[t][e][3]=c(w[t][e-1][1],w[t][e][1],w[t][e+1][1],n,o));for(let t=0;t&lt;r;++t){w[0][t][2]=[],w[x][t][2]=[];for(let e=0;e&lt;4;++e)n=i(w[1][t][0],w[0][t][0]),o=i(w[x][t][0],w[x-1][t][0]),w[0][t][2][e]=n&gt;0?2*(w[1][t][1][e]-w[0][t][1][e])/n-w[1][t][2][e]:0,w[x][t][2][e]=o&gt;0?2*(w[x][t][1][e]-w[x-1][t][1][e])/o-w[x-1][t][2][e]:0}for(let t=0;t&lt;s;++t){w[t][0][3]=[],w[t][g][3]=[];for(let e=0;e&lt;4;++e)n=i(w[t][1][0],w[t][0][0]),o=i(w[t][g][0],w[t][g-1][0]),w[t][0][3][e]=n&gt;0?2*(w[t][1][1][e]-w[t][0][1][e])/n-w[t][1][3][e]:0,w[t][g][3][e]=o&gt;0?2*(w[t][g][1][e]-w[t][g-1][1][e])/o-w[t][g-1][3][e]:0}for(let s=0;s&lt;x;++s)for(let r=0;r&lt;g;++r){let n=i(w[s][r][0],w[s+1][r][0]),o=i(w[s][r+1][0],w[s+1][r+1][0]),c=i(w[s][r][0],w[s][r+1][0]),x=i(w[s+1][r][0],w[s+1][r+1][0]),g=[[],[],[],[]];for(let t=0;t&lt;4;++t){(d=[])[0]=w[s][r][1][t],d[1]=w[s+1][r][1][t],d[2]=w[s][r+1][1][t],d[3]=w[s+1][r+1][1][t],d[4]=w[s][r][2][t]*n,d[5]=w[s+1][r][2][t]*n,d[6]=w[s][r+1][2][t]*o,d[7]=w[s+1][r+1][2][t]*o,d[8]=w[s][r][3][t]*c,d[9]=w[s+1][r][3][t]*x,d[10]=w[s][r+1][3][t]*c,d[11]=w[s+1][r+1][3][t]*x,d[12]=0,d[13]=0,d[14]=0,d[15]=0,u=f(d);for(let e=0;e&lt;9;++e){g[t][e]=[];for(let s=0;s&lt;9;++s)g[t][e][s]=p(u,e/8,s/8),g[t][e][s]&gt;255?g[t][e][s]=255:g[t][e][s]&lt;0&amp;&amp;(g[t][e][s]=0)}}h=[];for(let t=3*s,e=3*s+4;t&lt;e;++t)h.push(this.nodes[t].slice(3*r,3*r+4));l=y(h);for(let s=0;s&lt;8;++s)for(let r=0;r&lt;8;++r)(a=new m(l[s][r],[[[g[0][s][r],g[1][s][r],g[2][s][r],g[3][s][r]],[g[0][s][r+1],g[1][s][r+1],g[2][s][r+1],g[3][s][r+1]]],[[g[0][s+1][r],g[1][s+1][r],g[2][s+1][r],g[3][s+1][r]],[g[0][s+1][r+1],g[1][s+1][r+1],g[2][s+1][r+1],g[3][s+1][r+1]]]])).paint(t,e)}}}transform(t){if(t instanceof x)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].add(t);else if(t instanceof g)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].transform(t)}scale(t){for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].scale(t)}}document.querySelectorAll(&quot;rect,circle,ellipse,path,text&quot;).forEach((r,n)=&gt;{let o=r.getAttribute(&quot;id&quot;);o||(o=&quot;patchjs_shape&quot;+n,r.setAttribute(&quot;id&quot;,o));const i=r.style.fill.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/),a=r.style.stroke.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/);if(i&amp;&amp;i[1]){const a=document.getElementById(i[1]);if(a&amp;&amp;&quot;meshgradient&quot;===a.nodeName){const i=r.getBBox();let l=document.createElementNS(s,&quot;canvas&quot;);d(l,{width:i.width,height:i.height});const c=l.getContext(&quot;2d&quot;);let u=c.createImageData(i.width,i.height);const f=new b(a);&quot;objectBoundingBox&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.scale(new x(i.width,i.height));const p=a.getAttribute(&quot;gradientTransform&quot;);null!=p&amp;&amp;f.transform(h(p)),&quot;userSpaceOnUse&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.transform(new x(-i.x,-i.y)),f.paintMesh(u.data,l.width),c.putImageData(u,0,0);const y=document.createElementNS(t,&quot;image&quot;);d(y,{width:i.width,height:i.height,x:i.x,y:i.y});let g=l.toDataURL();y.setAttributeNS(e,&quot;xlink:href&quot;,g),r.parentNode.insertBefore(y,r),r.style.fill=&quot;none&quot;;const w=document.createElementNS(t,&quot;use&quot;);w.setAttributeNS(e,&quot;xlink:href&quot;,&quot;#&quot;+o);const m=&quot;patchjs_clip&quot;+n,M=document.createElementNS(t,&quot;clipPath&quot;);M.setAttribute(&quot;id&quot;,m),M.appendChild(w),r.parentElement.insertBefore(M,r),y.setAttribute(&quot;clip-path&quot;,&quot;url(#&quot;+m+&quot;)&quot;),u=null,l=null,g=null}}if(a&amp;&amp;a[1]){const o=document.getElementById(a[1]);if(o&amp;&amp;&quot;meshgradient&quot;===o.nodeName){const i=parseFloat(r.style.strokeWidth.slice(0,-2))*(parseFloat(r.style.strokeMiterlimit)||parseFloat(r.getAttribute(&quot;stroke-miterlimit&quot;))||1),a=r.getBBox(),l=Math.trunc(a.width+i),c=Math.trunc(a.height+i),u=Math.trunc(a.x-i/2),f=Math.trunc(a.y-i/2);let p=document.createElementNS(s,&quot;canvas&quot;);d(p,{width:l,height:c});const y=p.getContext(&quot;2d&quot;);let g=y.createImageData(l,c);const w=new b(o);&quot;objectBoundingBox&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.scale(new x(l,c));const m=o.getAttribute(&quot;gradientTransform&quot;);null!=m&amp;&amp;w.transform(h(m)),&quot;userSpaceOnUse&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.transform(new x(-u,-f)),w.paintMesh(g.data,p.width),y.putImageData(g,0,0);const M=document.createElementNS(t,&quot;image&quot;);d(M,{width:l,height:c,x:0,y:0});let S=p.toDataURL();M.setAttributeNS(e,&quot;xlink:href&quot;,S);const k=&quot;pattern_clip&quot;+n,A=document.createElementNS(t,&quot;pattern&quot;);d(A,{id:k,patternUnits:&quot;userSpaceOnUse&quot;,width:l,height:c,x:u,y:f}),A.appendChild(M),o.parentNode.appendChild(A),r.style.stroke=&quot;url(#&quot;+k+&quot;)&quot;,g=null,p=null,S=null}}})}();
</script>
</svg>
